schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""kanban boards"""
type boards {
  """An array relationship"""
  columns(
    """distinct select on columns"""
    distinct_on: [columns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [columns_order_by!]

    """filter the rows returned"""
    where: columns_bool_exp
  ): [columns!]!

  """An aggregate relationship"""
  columns_aggregate(
    """distinct select on columns"""
    distinct_on: [columns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [columns_order_by!]

    """filter the rows returned"""
    where: columns_bool_exp
  ): columns_aggregate!
  created_at: timestamptz!
  id: uuid!
  name: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "boards"
"""
type boards_aggregate {
  aggregate: boards_aggregate_fields
  nodes: [boards!]!
}

"""
aggregate fields of "boards"
"""
type boards_aggregate_fields {
  count(columns: [boards_select_column!], distinct: Boolean): Int!
  max: boards_max_fields
  min: boards_min_fields
}

"""
Boolean expression to filter rows from the table "boards". All fields are combined with a logical 'AND'.
"""
input boards_bool_exp {
  _and: [boards_bool_exp!]
  _not: boards_bool_exp
  _or: [boards_bool_exp!]
  columns: columns_bool_exp
  columns_aggregate: columns_aggregate_bool_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "boards"
"""
enum boards_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  boards_pkey
}

"""
input type for inserting data into table "boards"
"""
input boards_insert_input {
  columns: columns_arr_rel_insert_input
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type boards_max_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""aggregate min on columns"""
type boards_min_fields {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
response of any mutation on the table "boards"
"""
type boards_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [boards!]!
}

"""
input type for inserting object relation for remote table "boards"
"""
input boards_obj_rel_insert_input {
  data: boards_insert_input!

  """upsert condition"""
  on_conflict: boards_on_conflict
}

"""
on_conflict condition type for table "boards"
"""
input boards_on_conflict {
  constraint: boards_constraint!
  update_columns: [boards_update_column!]! = []
  where: boards_bool_exp
}

"""Ordering options when selecting data from "boards"."""
input boards_order_by {
  columns_aggregate: columns_aggregate_order_by
  created_at: order_by
  id: order_by
  name: order_by
  updated_at: order_by
}

"""primary key columns input for table: boards"""
input boards_pk_columns_input {
  id: uuid!
}

"""
select columns of table "boards"
"""
enum boards_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

"""
input type for updating data in table "boards"
"""
input boards_set_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
Streaming cursor of the table "boards"
"""
input boards_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: boards_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input boards_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  name: String
  updated_at: timestamptz
}

"""
update columns of table "boards"
"""
enum boards_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  updated_at
}

input boards_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: boards_set_input

  """filter the rows which have to be updated"""
  where: boards_bool_exp!
}

"""columns of a board"""
type columns {
  """An object relationship"""
  board: boards
  board_id: uuid
  created_at: timestamptz!
  id: uuid!
  name: String!
  position: Int!

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): tasks_aggregate!
  updated_at: timestamptz!
}

"""
aggregated selection of "columns"
"""
type columns_aggregate {
  aggregate: columns_aggregate_fields
  nodes: [columns!]!
}

input columns_aggregate_bool_exp {
  count: columns_aggregate_bool_exp_count
}

input columns_aggregate_bool_exp_count {
  arguments: [columns_select_column!]
  distinct: Boolean
  filter: columns_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "columns"
"""
type columns_aggregate_fields {
  avg: columns_avg_fields
  count(columns: [columns_select_column!], distinct: Boolean): Int!
  max: columns_max_fields
  min: columns_min_fields
  stddev: columns_stddev_fields
  stddev_pop: columns_stddev_pop_fields
  stddev_samp: columns_stddev_samp_fields
  sum: columns_sum_fields
  var_pop: columns_var_pop_fields
  var_samp: columns_var_samp_fields
  variance: columns_variance_fields
}

"""
order by aggregate values of table "columns"
"""
input columns_aggregate_order_by {
  avg: columns_avg_order_by
  count: order_by
  max: columns_max_order_by
  min: columns_min_order_by
  stddev: columns_stddev_order_by
  stddev_pop: columns_stddev_pop_order_by
  stddev_samp: columns_stddev_samp_order_by
  sum: columns_sum_order_by
  var_pop: columns_var_pop_order_by
  var_samp: columns_var_samp_order_by
  variance: columns_variance_order_by
}

"""
input type for inserting array relation for remote table "columns"
"""
input columns_arr_rel_insert_input {
  data: [columns_insert_input!]!

  """upsert condition"""
  on_conflict: columns_on_conflict
}

"""aggregate avg on columns"""
type columns_avg_fields {
  position: Float
}

"""
order by avg() on columns of table "columns"
"""
input columns_avg_order_by {
  position: order_by
}

"""
Boolean expression to filter rows from the table "columns". All fields are combined with a logical 'AND'.
"""
input columns_bool_exp {
  _and: [columns_bool_exp!]
  _not: columns_bool_exp
  _or: [columns_bool_exp!]
  board: boards_bool_exp
  board_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
  position: Int_comparison_exp
  tasks: tasks_bool_exp
  tasks_aggregate: tasks_aggregate_bool_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "columns"
"""
enum columns_constraint {
  """
  unique or primary key constraint on columns "position", "board_id"
  """
  columns_board_id_position_key

  """
  unique or primary key constraint on columns "id"
  """
  columns_pkey
}

"""
input type for incrementing numeric columns in table "columns"
"""
input columns_inc_input {
  position: Int
}

"""
input type for inserting data into table "columns"
"""
input columns_insert_input {
  board: boards_obj_rel_insert_input
  board_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  position: Int
  tasks: tasks_arr_rel_insert_input
  updated_at: timestamptz
}

"""aggregate max on columns"""
type columns_max_fields {
  board_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  position: Int
  updated_at: timestamptz
}

"""
order by max() on columns of table "columns"
"""
input columns_max_order_by {
  board_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  position: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type columns_min_fields {
  board_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  position: Int
  updated_at: timestamptz
}

"""
order by min() on columns of table "columns"
"""
input columns_min_order_by {
  board_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  position: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "columns"
"""
type columns_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [columns!]!
}

"""
input type for inserting object relation for remote table "columns"
"""
input columns_obj_rel_insert_input {
  data: columns_insert_input!

  """upsert condition"""
  on_conflict: columns_on_conflict
}

"""
on_conflict condition type for table "columns"
"""
input columns_on_conflict {
  constraint: columns_constraint!
  update_columns: [columns_update_column!]! = []
  where: columns_bool_exp
}

"""Ordering options when selecting data from "columns"."""
input columns_order_by {
  board: boards_order_by
  board_id: order_by
  created_at: order_by
  id: order_by
  name: order_by
  position: order_by
  tasks_aggregate: tasks_aggregate_order_by
  updated_at: order_by
}

"""primary key columns input for table: columns"""
input columns_pk_columns_input {
  id: uuid!
}

"""
select columns of table "columns"
"""
enum columns_select_column {
  """column name"""
  board_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  position

  """column name"""
  updated_at
}

"""
input type for updating data in table "columns"
"""
input columns_set_input {
  board_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  position: Int
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type columns_stddev_fields {
  position: Float
}

"""
order by stddev() on columns of table "columns"
"""
input columns_stddev_order_by {
  position: order_by
}

"""aggregate stddev_pop on columns"""
type columns_stddev_pop_fields {
  position: Float
}

"""
order by stddev_pop() on columns of table "columns"
"""
input columns_stddev_pop_order_by {
  position: order_by
}

"""aggregate stddev_samp on columns"""
type columns_stddev_samp_fields {
  position: Float
}

"""
order by stddev_samp() on columns of table "columns"
"""
input columns_stddev_samp_order_by {
  position: order_by
}

"""
Streaming cursor of the table "columns"
"""
input columns_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: columns_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input columns_stream_cursor_value_input {
  board_id: uuid
  created_at: timestamptz
  id: uuid
  name: String
  position: Int
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type columns_sum_fields {
  position: Int
}

"""
order by sum() on columns of table "columns"
"""
input columns_sum_order_by {
  position: order_by
}

"""
update columns of table "columns"
"""
enum columns_update_column {
  """column name"""
  board_id

  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  name

  """column name"""
  position

  """column name"""
  updated_at
}

input columns_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: columns_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: columns_set_input

  """filter the rows which have to be updated"""
  where: columns_bool_exp!
}

"""aggregate var_pop on columns"""
type columns_var_pop_fields {
  position: Float
}

"""
order by var_pop() on columns of table "columns"
"""
input columns_var_pop_order_by {
  position: order_by
}

"""aggregate var_samp on columns"""
type columns_var_samp_fields {
  position: Float
}

"""
order by var_samp() on columns of table "columns"
"""
input columns_var_samp_order_by {
  position: order_by
}

"""aggregate variance on columns"""
type columns_variance_fields {
  position: Float
}

"""
order by variance() on columns of table "columns"
"""
input columns_variance_order_by {
  position: order_by
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "boards"
  """
  delete_boards(
    """filter the rows which have to be deleted"""
    where: boards_bool_exp!
  ): boards_mutation_response

  """
  delete single row from the table: "boards"
  """
  delete_boards_by_pk(id: uuid!): boards

  """
  delete data from the table: "columns"
  """
  delete_columns(
    """filter the rows which have to be deleted"""
    where: columns_bool_exp!
  ): columns_mutation_response

  """
  delete single row from the table: "columns"
  """
  delete_columns_by_pk(id: uuid!): columns

  """
  delete data from the table: "subtasks"
  """
  delete_subtasks(
    """filter the rows which have to be deleted"""
    where: subtasks_bool_exp!
  ): subtasks_mutation_response

  """
  delete single row from the table: "subtasks"
  """
  delete_subtasks_by_pk(id: uuid!): subtasks

  """
  delete data from the table: "tasks"
  """
  delete_tasks(
    """filter the rows which have to be deleted"""
    where: tasks_bool_exp!
  ): tasks_mutation_response

  """
  delete single row from the table: "tasks"
  """
  delete_tasks_by_pk(id: uuid!): tasks

  """
  delete data from the table: "test_one"
  """
  delete_test_one(
    """filter the rows which have to be deleted"""
    where: test_one_bool_exp!
  ): test_one_mutation_response

  """
  delete single row from the table: "test_one"
  """
  delete_test_one_by_pk(id: uuid!): test_one

  """
  insert data into the table: "boards"
  """
  insert_boards(
    """the rows to be inserted"""
    objects: [boards_insert_input!]!

    """upsert condition"""
    on_conflict: boards_on_conflict
  ): boards_mutation_response

  """
  insert a single row into the table: "boards"
  """
  insert_boards_one(
    """the row to be inserted"""
    object: boards_insert_input!

    """upsert condition"""
    on_conflict: boards_on_conflict
  ): boards

  """
  insert data into the table: "columns"
  """
  insert_columns(
    """the rows to be inserted"""
    objects: [columns_insert_input!]!

    """upsert condition"""
    on_conflict: columns_on_conflict
  ): columns_mutation_response

  """
  insert a single row into the table: "columns"
  """
  insert_columns_one(
    """the row to be inserted"""
    object: columns_insert_input!

    """upsert condition"""
    on_conflict: columns_on_conflict
  ): columns

  """
  insert data into the table: "subtasks"
  """
  insert_subtasks(
    """the rows to be inserted"""
    objects: [subtasks_insert_input!]!

    """upsert condition"""
    on_conflict: subtasks_on_conflict
  ): subtasks_mutation_response

  """
  insert a single row into the table: "subtasks"
  """
  insert_subtasks_one(
    """the row to be inserted"""
    object: subtasks_insert_input!

    """upsert condition"""
    on_conflict: subtasks_on_conflict
  ): subtasks

  """
  insert data into the table: "tasks"
  """
  insert_tasks(
    """the rows to be inserted"""
    objects: [tasks_insert_input!]!

    """upsert condition"""
    on_conflict: tasks_on_conflict
  ): tasks_mutation_response

  """
  insert a single row into the table: "tasks"
  """
  insert_tasks_one(
    """the row to be inserted"""
    object: tasks_insert_input!

    """upsert condition"""
    on_conflict: tasks_on_conflict
  ): tasks

  """
  insert data into the table: "test_one"
  """
  insert_test_one(
    """the rows to be inserted"""
    objects: [test_one_insert_input!]!

    """upsert condition"""
    on_conflict: test_one_on_conflict
  ): test_one_mutation_response

  """
  insert a single row into the table: "test_one"
  """
  insert_test_one_one(
    """the row to be inserted"""
    object: test_one_insert_input!

    """upsert condition"""
    on_conflict: test_one_on_conflict
  ): test_one

  """
  update data of the table: "boards"
  """
  update_boards(
    """sets the columns of the filtered rows to the given values"""
    _set: boards_set_input

    """filter the rows which have to be updated"""
    where: boards_bool_exp!
  ): boards_mutation_response

  """
  update single row of the table: "boards"
  """
  update_boards_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: boards_set_input
    pk_columns: boards_pk_columns_input!
  ): boards

  """
  update multiples rows of table: "boards"
  """
  update_boards_many(
    """updates to execute, in order"""
    updates: [boards_updates!]!
  ): [boards_mutation_response]

  """
  update data of the table: "columns"
  """
  update_columns(
    """increments the numeric columns with given value of the filtered values"""
    _inc: columns_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: columns_set_input

    """filter the rows which have to be updated"""
    where: columns_bool_exp!
  ): columns_mutation_response

  """
  update single row of the table: "columns"
  """
  update_columns_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: columns_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: columns_set_input
    pk_columns: columns_pk_columns_input!
  ): columns

  """
  update multiples rows of table: "columns"
  """
  update_columns_many(
    """updates to execute, in order"""
    updates: [columns_updates!]!
  ): [columns_mutation_response]

  """
  update data of the table: "subtasks"
  """
  update_subtasks(
    """increments the numeric columns with given value of the filtered values"""
    _inc: subtasks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: subtasks_set_input

    """filter the rows which have to be updated"""
    where: subtasks_bool_exp!
  ): subtasks_mutation_response

  """
  update single row of the table: "subtasks"
  """
  update_subtasks_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: subtasks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: subtasks_set_input
    pk_columns: subtasks_pk_columns_input!
  ): subtasks

  """
  update multiples rows of table: "subtasks"
  """
  update_subtasks_many(
    """updates to execute, in order"""
    updates: [subtasks_updates!]!
  ): [subtasks_mutation_response]

  """
  update data of the table: "tasks"
  """
  update_tasks(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tasks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tasks_set_input

    """filter the rows which have to be updated"""
    where: tasks_bool_exp!
  ): tasks_mutation_response

  """
  update single row of the table: "tasks"
  """
  update_tasks_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: tasks_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: tasks_set_input
    pk_columns: tasks_pk_columns_input!
  ): tasks

  """
  update multiples rows of table: "tasks"
  """
  update_tasks_many(
    """updates to execute, in order"""
    updates: [tasks_updates!]!
  ): [tasks_mutation_response]

  """
  update data of the table: "test_one"
  """
  update_test_one(
    """increments the numeric columns with given value of the filtered values"""
    _inc: test_one_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: test_one_set_input

    """filter the rows which have to be updated"""
    where: test_one_bool_exp!
  ): test_one_mutation_response

  """
  update single row of the table: "test_one"
  """
  update_test_one_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: test_one_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: test_one_set_input
    pk_columns: test_one_pk_columns_input!
  ): test_one

  """
  update multiples rows of table: "test_one"
  """
  update_test_one_many(
    """updates to execute, in order"""
    updates: [test_one_updates!]!
  ): [test_one_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "boards"
  """
  boards(
    """distinct select on columns"""
    distinct_on: [boards_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [boards_order_by!]

    """filter the rows returned"""
    where: boards_bool_exp
  ): [boards!]!

  """
  fetch aggregated fields from the table: "boards"
  """
  boards_aggregate(
    """distinct select on columns"""
    distinct_on: [boards_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [boards_order_by!]

    """filter the rows returned"""
    where: boards_bool_exp
  ): boards_aggregate!

  """fetch data from the table: "boards" using primary key columns"""
  boards_by_pk(id: uuid!): boards

  """An array relationship"""
  columns(
    """distinct select on columns"""
    distinct_on: [columns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [columns_order_by!]

    """filter the rows returned"""
    where: columns_bool_exp
  ): [columns!]!

  """An aggregate relationship"""
  columns_aggregate(
    """distinct select on columns"""
    distinct_on: [columns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [columns_order_by!]

    """filter the rows returned"""
    where: columns_bool_exp
  ): columns_aggregate!

  """fetch data from the table: "columns" using primary key columns"""
  columns_by_pk(id: uuid!): columns

  """An array relationship"""
  subtasks(
    """distinct select on columns"""
    distinct_on: [subtasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subtasks_order_by!]

    """filter the rows returned"""
    where: subtasks_bool_exp
  ): [subtasks!]!

  """An aggregate relationship"""
  subtasks_aggregate(
    """distinct select on columns"""
    distinct_on: [subtasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subtasks_order_by!]

    """filter the rows returned"""
    where: subtasks_bool_exp
  ): subtasks_aggregate!

  """fetch data from the table: "subtasks" using primary key columns"""
  subtasks_by_pk(id: uuid!): subtasks

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): tasks_aggregate!

  """fetch data from the table: "tasks" using primary key columns"""
  tasks_by_pk(id: uuid!): tasks

  """
  fetch data from the table: "test_one"
  """
  test_one(
    """distinct select on columns"""
    distinct_on: [test_one_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_one_order_by!]

    """filter the rows returned"""
    where: test_one_bool_exp
  ): [test_one!]!

  """
  fetch aggregated fields from the table: "test_one"
  """
  test_one_aggregate(
    """distinct select on columns"""
    distinct_on: [test_one_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_one_order_by!]

    """filter the rows returned"""
    where: test_one_bool_exp
  ): test_one_aggregate!

  """fetch data from the table: "test_one" using primary key columns"""
  test_one_by_pk(id: uuid!): test_one
}

type subscription_root {
  """
  fetch data from the table: "boards"
  """
  boards(
    """distinct select on columns"""
    distinct_on: [boards_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [boards_order_by!]

    """filter the rows returned"""
    where: boards_bool_exp
  ): [boards!]!

  """
  fetch aggregated fields from the table: "boards"
  """
  boards_aggregate(
    """distinct select on columns"""
    distinct_on: [boards_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [boards_order_by!]

    """filter the rows returned"""
    where: boards_bool_exp
  ): boards_aggregate!

  """fetch data from the table: "boards" using primary key columns"""
  boards_by_pk(id: uuid!): boards

  """
  fetch data from the table in a streaming manner: "boards"
  """
  boards_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [boards_stream_cursor_input]!

    """filter the rows returned"""
    where: boards_bool_exp
  ): [boards!]!

  """An array relationship"""
  columns(
    """distinct select on columns"""
    distinct_on: [columns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [columns_order_by!]

    """filter the rows returned"""
    where: columns_bool_exp
  ): [columns!]!

  """An aggregate relationship"""
  columns_aggregate(
    """distinct select on columns"""
    distinct_on: [columns_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [columns_order_by!]

    """filter the rows returned"""
    where: columns_bool_exp
  ): columns_aggregate!

  """fetch data from the table: "columns" using primary key columns"""
  columns_by_pk(id: uuid!): columns

  """
  fetch data from the table in a streaming manner: "columns"
  """
  columns_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [columns_stream_cursor_input]!

    """filter the rows returned"""
    where: columns_bool_exp
  ): [columns!]!

  """An array relationship"""
  subtasks(
    """distinct select on columns"""
    distinct_on: [subtasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subtasks_order_by!]

    """filter the rows returned"""
    where: subtasks_bool_exp
  ): [subtasks!]!

  """An aggregate relationship"""
  subtasks_aggregate(
    """distinct select on columns"""
    distinct_on: [subtasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subtasks_order_by!]

    """filter the rows returned"""
    where: subtasks_bool_exp
  ): subtasks_aggregate!

  """fetch data from the table: "subtasks" using primary key columns"""
  subtasks_by_pk(id: uuid!): subtasks

  """
  fetch data from the table in a streaming manner: "subtasks"
  """
  subtasks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [subtasks_stream_cursor_input]!

    """filter the rows returned"""
    where: subtasks_bool_exp
  ): [subtasks!]!

  """An array relationship"""
  tasks(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """An aggregate relationship"""
  tasks_aggregate(
    """distinct select on columns"""
    distinct_on: [tasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [tasks_order_by!]

    """filter the rows returned"""
    where: tasks_bool_exp
  ): tasks_aggregate!

  """fetch data from the table: "tasks" using primary key columns"""
  tasks_by_pk(id: uuid!): tasks

  """
  fetch data from the table in a streaming manner: "tasks"
  """
  tasks_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [tasks_stream_cursor_input]!

    """filter the rows returned"""
    where: tasks_bool_exp
  ): [tasks!]!

  """
  fetch data from the table: "test_one"
  """
  test_one(
    """distinct select on columns"""
    distinct_on: [test_one_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_one_order_by!]

    """filter the rows returned"""
    where: test_one_bool_exp
  ): [test_one!]!

  """
  fetch aggregated fields from the table: "test_one"
  """
  test_one_aggregate(
    """distinct select on columns"""
    distinct_on: [test_one_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [test_one_order_by!]

    """filter the rows returned"""
    where: test_one_bool_exp
  ): test_one_aggregate!

  """fetch data from the table: "test_one" using primary key columns"""
  test_one_by_pk(id: uuid!): test_one

  """
  fetch data from the table in a streaming manner: "test_one"
  """
  test_one_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [test_one_stream_cursor_input]!

    """filter the rows returned"""
    where: test_one_bool_exp
  ): [test_one!]!
}

"""subtasks of tasks which are basically checklists"""
type subtasks {
  created_at: timestamptz!
  id: uuid!
  is_completed: Boolean!
  position: Int!

  """An object relationship"""
  task: tasks
  task_id: uuid
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "subtasks"
"""
type subtasks_aggregate {
  aggregate: subtasks_aggregate_fields
  nodes: [subtasks!]!
}

input subtasks_aggregate_bool_exp {
  bool_and: subtasks_aggregate_bool_exp_bool_and
  bool_or: subtasks_aggregate_bool_exp_bool_or
  count: subtasks_aggregate_bool_exp_count
}

input subtasks_aggregate_bool_exp_bool_and {
  arguments: subtasks_select_column_subtasks_aggregate_bool_exp_bool_and_arguments_columns!
  distinct: Boolean
  filter: subtasks_bool_exp
  predicate: Boolean_comparison_exp!
}

input subtasks_aggregate_bool_exp_bool_or {
  arguments: subtasks_select_column_subtasks_aggregate_bool_exp_bool_or_arguments_columns!
  distinct: Boolean
  filter: subtasks_bool_exp
  predicate: Boolean_comparison_exp!
}

input subtasks_aggregate_bool_exp_count {
  arguments: [subtasks_select_column!]
  distinct: Boolean
  filter: subtasks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "subtasks"
"""
type subtasks_aggregate_fields {
  avg: subtasks_avg_fields
  count(columns: [subtasks_select_column!], distinct: Boolean): Int!
  max: subtasks_max_fields
  min: subtasks_min_fields
  stddev: subtasks_stddev_fields
  stddev_pop: subtasks_stddev_pop_fields
  stddev_samp: subtasks_stddev_samp_fields
  sum: subtasks_sum_fields
  var_pop: subtasks_var_pop_fields
  var_samp: subtasks_var_samp_fields
  variance: subtasks_variance_fields
}

"""
order by aggregate values of table "subtasks"
"""
input subtasks_aggregate_order_by {
  avg: subtasks_avg_order_by
  count: order_by
  max: subtasks_max_order_by
  min: subtasks_min_order_by
  stddev: subtasks_stddev_order_by
  stddev_pop: subtasks_stddev_pop_order_by
  stddev_samp: subtasks_stddev_samp_order_by
  sum: subtasks_sum_order_by
  var_pop: subtasks_var_pop_order_by
  var_samp: subtasks_var_samp_order_by
  variance: subtasks_variance_order_by
}

"""
input type for inserting array relation for remote table "subtasks"
"""
input subtasks_arr_rel_insert_input {
  data: [subtasks_insert_input!]!

  """upsert condition"""
  on_conflict: subtasks_on_conflict
}

"""aggregate avg on columns"""
type subtasks_avg_fields {
  position: Float
}

"""
order by avg() on columns of table "subtasks"
"""
input subtasks_avg_order_by {
  position: order_by
}

"""
Boolean expression to filter rows from the table "subtasks". All fields are combined with a logical 'AND'.
"""
input subtasks_bool_exp {
  _and: [subtasks_bool_exp!]
  _not: subtasks_bool_exp
  _or: [subtasks_bool_exp!]
  created_at: timestamptz_comparison_exp
  id: uuid_comparison_exp
  is_completed: Boolean_comparison_exp
  position: Int_comparison_exp
  task: tasks_bool_exp
  task_id: uuid_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "subtasks"
"""
enum subtasks_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  subtasks_pkey

  """
  unique or primary key constraint on columns "position", "task_id"
  """
  subtasks_task_id_position_key
}

"""
input type for incrementing numeric columns in table "subtasks"
"""
input subtasks_inc_input {
  position: Int
}

"""
input type for inserting data into table "subtasks"
"""
input subtasks_insert_input {
  created_at: timestamptz
  id: uuid
  is_completed: Boolean
  position: Int
  task: tasks_obj_rel_insert_input
  task_id: uuid
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type subtasks_max_fields {
  created_at: timestamptz
  id: uuid
  position: Int
  task_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "subtasks"
"""
input subtasks_max_order_by {
  created_at: order_by
  id: order_by
  position: order_by
  task_id: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type subtasks_min_fields {
  created_at: timestamptz
  id: uuid
  position: Int
  task_id: uuid
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "subtasks"
"""
input subtasks_min_order_by {
  created_at: order_by
  id: order_by
  position: order_by
  task_id: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "subtasks"
"""
type subtasks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [subtasks!]!
}

"""
on_conflict condition type for table "subtasks"
"""
input subtasks_on_conflict {
  constraint: subtasks_constraint!
  update_columns: [subtasks_update_column!]! = []
  where: subtasks_bool_exp
}

"""Ordering options when selecting data from "subtasks"."""
input subtasks_order_by {
  created_at: order_by
  id: order_by
  is_completed: order_by
  position: order_by
  task: tasks_order_by
  task_id: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: subtasks"""
input subtasks_pk_columns_input {
  id: uuid!
}

"""
select columns of table "subtasks"
"""
enum subtasks_select_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_completed

  """column name"""
  position

  """column name"""
  task_id

  """column name"""
  title

  """column name"""
  updated_at
}

"""
select "subtasks_aggregate_bool_exp_bool_and_arguments_columns" columns of table "subtasks"
"""
enum subtasks_select_column_subtasks_aggregate_bool_exp_bool_and_arguments_columns {
  """column name"""
  is_completed
}

"""
select "subtasks_aggregate_bool_exp_bool_or_arguments_columns" columns of table "subtasks"
"""
enum subtasks_select_column_subtasks_aggregate_bool_exp_bool_or_arguments_columns {
  """column name"""
  is_completed
}

"""
input type for updating data in table "subtasks"
"""
input subtasks_set_input {
  created_at: timestamptz
  id: uuid
  is_completed: Boolean
  position: Int
  task_id: uuid
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type subtasks_stddev_fields {
  position: Float
}

"""
order by stddev() on columns of table "subtasks"
"""
input subtasks_stddev_order_by {
  position: order_by
}

"""aggregate stddev_pop on columns"""
type subtasks_stddev_pop_fields {
  position: Float
}

"""
order by stddev_pop() on columns of table "subtasks"
"""
input subtasks_stddev_pop_order_by {
  position: order_by
}

"""aggregate stddev_samp on columns"""
type subtasks_stddev_samp_fields {
  position: Float
}

"""
order by stddev_samp() on columns of table "subtasks"
"""
input subtasks_stddev_samp_order_by {
  position: order_by
}

"""
Streaming cursor of the table "subtasks"
"""
input subtasks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: subtasks_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input subtasks_stream_cursor_value_input {
  created_at: timestamptz
  id: uuid
  is_completed: Boolean
  position: Int
  task_id: uuid
  title: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type subtasks_sum_fields {
  position: Int
}

"""
order by sum() on columns of table "subtasks"
"""
input subtasks_sum_order_by {
  position: order_by
}

"""
update columns of table "subtasks"
"""
enum subtasks_update_column {
  """column name"""
  created_at

  """column name"""
  id

  """column name"""
  is_completed

  """column name"""
  position

  """column name"""
  task_id

  """column name"""
  title

  """column name"""
  updated_at
}

input subtasks_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: subtasks_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: subtasks_set_input

  """filter the rows which have to be updated"""
  where: subtasks_bool_exp!
}

"""aggregate var_pop on columns"""
type subtasks_var_pop_fields {
  position: Float
}

"""
order by var_pop() on columns of table "subtasks"
"""
input subtasks_var_pop_order_by {
  position: order_by
}

"""aggregate var_samp on columns"""
type subtasks_var_samp_fields {
  position: Float
}

"""
order by var_samp() on columns of table "subtasks"
"""
input subtasks_var_samp_order_by {
  position: order_by
}

"""aggregate variance on columns"""
type subtasks_variance_fields {
  position: Float
}

"""
order by variance() on columns of table "subtasks"
"""
input subtasks_variance_order_by {
  position: order_by
}

"""column tasks"""
type tasks {
  """An object relationship"""
  column: columns
  column_id: uuid
  created_at: timestamptz!
  description: String!
  id: uuid!
  position: Int!

  """An array relationship"""
  subtasks(
    """distinct select on columns"""
    distinct_on: [subtasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subtasks_order_by!]

    """filter the rows returned"""
    where: subtasks_bool_exp
  ): [subtasks!]!

  """An aggregate relationship"""
  subtasks_aggregate(
    """distinct select on columns"""
    distinct_on: [subtasks_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [subtasks_order_by!]

    """filter the rows returned"""
    where: subtasks_bool_exp
  ): subtasks_aggregate!
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "tasks"
"""
type tasks_aggregate {
  aggregate: tasks_aggregate_fields
  nodes: [tasks!]!
}

input tasks_aggregate_bool_exp {
  count: tasks_aggregate_bool_exp_count
}

input tasks_aggregate_bool_exp_count {
  arguments: [tasks_select_column!]
  distinct: Boolean
  filter: tasks_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "tasks"
"""
type tasks_aggregate_fields {
  avg: tasks_avg_fields
  count(columns: [tasks_select_column!], distinct: Boolean): Int!
  max: tasks_max_fields
  min: tasks_min_fields
  stddev: tasks_stddev_fields
  stddev_pop: tasks_stddev_pop_fields
  stddev_samp: tasks_stddev_samp_fields
  sum: tasks_sum_fields
  var_pop: tasks_var_pop_fields
  var_samp: tasks_var_samp_fields
  variance: tasks_variance_fields
}

"""
order by aggregate values of table "tasks"
"""
input tasks_aggregate_order_by {
  avg: tasks_avg_order_by
  count: order_by
  max: tasks_max_order_by
  min: tasks_min_order_by
  stddev: tasks_stddev_order_by
  stddev_pop: tasks_stddev_pop_order_by
  stddev_samp: tasks_stddev_samp_order_by
  sum: tasks_sum_order_by
  var_pop: tasks_var_pop_order_by
  var_samp: tasks_var_samp_order_by
  variance: tasks_variance_order_by
}

"""
input type for inserting array relation for remote table "tasks"
"""
input tasks_arr_rel_insert_input {
  data: [tasks_insert_input!]!

  """upsert condition"""
  on_conflict: tasks_on_conflict
}

"""aggregate avg on columns"""
type tasks_avg_fields {
  position: Float
}

"""
order by avg() on columns of table "tasks"
"""
input tasks_avg_order_by {
  position: order_by
}

"""
Boolean expression to filter rows from the table "tasks". All fields are combined with a logical 'AND'.
"""
input tasks_bool_exp {
  _and: [tasks_bool_exp!]
  _not: tasks_bool_exp
  _or: [tasks_bool_exp!]
  column: columns_bool_exp
  column_id: uuid_comparison_exp
  created_at: timestamptz_comparison_exp
  description: String_comparison_exp
  id: uuid_comparison_exp
  position: Int_comparison_exp
  subtasks: subtasks_bool_exp
  subtasks_aggregate: subtasks_aggregate_bool_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "tasks"
"""
enum tasks_constraint {
  """
  unique or primary key constraint on columns "column_id", "position"
  """
  tasks_column_id_position_key

  """
  unique or primary key constraint on columns "id"
  """
  tasks_pkey
}

"""
input type for incrementing numeric columns in table "tasks"
"""
input tasks_inc_input {
  position: Int
}

"""
input type for inserting data into table "tasks"
"""
input tasks_insert_input {
  column: columns_obj_rel_insert_input
  column_id: uuid
  created_at: timestamptz
  description: String
  id: uuid
  position: Int
  subtasks: subtasks_arr_rel_insert_input
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type tasks_max_fields {
  column_id: uuid
  created_at: timestamptz
  description: String
  id: uuid
  position: Int
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "tasks"
"""
input tasks_max_order_by {
  column_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  position: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type tasks_min_fields {
  column_id: uuid
  created_at: timestamptz
  description: String
  id: uuid
  position: Int
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "tasks"
"""
input tasks_min_order_by {
  column_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  position: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "tasks"
"""
type tasks_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [tasks!]!
}

"""
input type for inserting object relation for remote table "tasks"
"""
input tasks_obj_rel_insert_input {
  data: tasks_insert_input!

  """upsert condition"""
  on_conflict: tasks_on_conflict
}

"""
on_conflict condition type for table "tasks"
"""
input tasks_on_conflict {
  constraint: tasks_constraint!
  update_columns: [tasks_update_column!]! = []
  where: tasks_bool_exp
}

"""Ordering options when selecting data from "tasks"."""
input tasks_order_by {
  column: columns_order_by
  column_id: order_by
  created_at: order_by
  description: order_by
  id: order_by
  position: order_by
  subtasks_aggregate: subtasks_aggregate_order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: tasks"""
input tasks_pk_columns_input {
  id: uuid!
}

"""
select columns of table "tasks"
"""
enum tasks_select_column {
  """column name"""
  column_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  position

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "tasks"
"""
input tasks_set_input {
  column_id: uuid
  created_at: timestamptz
  description: String
  id: uuid
  position: Int
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type tasks_stddev_fields {
  position: Float
}

"""
order by stddev() on columns of table "tasks"
"""
input tasks_stddev_order_by {
  position: order_by
}

"""aggregate stddev_pop on columns"""
type tasks_stddev_pop_fields {
  position: Float
}

"""
order by stddev_pop() on columns of table "tasks"
"""
input tasks_stddev_pop_order_by {
  position: order_by
}

"""aggregate stddev_samp on columns"""
type tasks_stddev_samp_fields {
  position: Float
}

"""
order by stddev_samp() on columns of table "tasks"
"""
input tasks_stddev_samp_order_by {
  position: order_by
}

"""
Streaming cursor of the table "tasks"
"""
input tasks_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: tasks_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input tasks_stream_cursor_value_input {
  column_id: uuid
  created_at: timestamptz
  description: String
  id: uuid
  position: Int
  title: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type tasks_sum_fields {
  position: Int
}

"""
order by sum() on columns of table "tasks"
"""
input tasks_sum_order_by {
  position: order_by
}

"""
update columns of table "tasks"
"""
enum tasks_update_column {
  """column name"""
  column_id

  """column name"""
  created_at

  """column name"""
  description

  """column name"""
  id

  """column name"""
  position

  """column name"""
  title

  """column name"""
  updated_at
}

input tasks_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: tasks_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: tasks_set_input

  """filter the rows which have to be updated"""
  where: tasks_bool_exp!
}

"""aggregate var_pop on columns"""
type tasks_var_pop_fields {
  position: Float
}

"""
order by var_pop() on columns of table "tasks"
"""
input tasks_var_pop_order_by {
  position: order_by
}

"""aggregate var_samp on columns"""
type tasks_var_samp_fields {
  position: Float
}

"""
order by var_samp() on columns of table "tasks"
"""
input tasks_var_samp_order_by {
  position: order_by
}

"""aggregate variance on columns"""
type tasks_variance_fields {
  position: Float
}

"""
order by variance() on columns of table "tasks"
"""
input tasks_variance_order_by {
  position: order_by
}

"""test_one remove later"""
type test_one {
  age: Int!
  id: uuid!
  name: String!
}

"""
aggregated selection of "test_one"
"""
type test_one_aggregate {
  aggregate: test_one_aggregate_fields
  nodes: [test_one!]!
}

"""
aggregate fields of "test_one"
"""
type test_one_aggregate_fields {
  avg: test_one_avg_fields
  count(columns: [test_one_select_column!], distinct: Boolean): Int!
  max: test_one_max_fields
  min: test_one_min_fields
  stddev: test_one_stddev_fields
  stddev_pop: test_one_stddev_pop_fields
  stddev_samp: test_one_stddev_samp_fields
  sum: test_one_sum_fields
  var_pop: test_one_var_pop_fields
  var_samp: test_one_var_samp_fields
  variance: test_one_variance_fields
}

"""aggregate avg on columns"""
type test_one_avg_fields {
  age: Float
}

"""
Boolean expression to filter rows from the table "test_one". All fields are combined with a logical 'AND'.
"""
input test_one_bool_exp {
  _and: [test_one_bool_exp!]
  _not: test_one_bool_exp
  _or: [test_one_bool_exp!]
  age: Int_comparison_exp
  id: uuid_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "test_one"
"""
enum test_one_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  test_one_pkey
}

"""
input type for incrementing numeric columns in table "test_one"
"""
input test_one_inc_input {
  age: Int
}

"""
input type for inserting data into table "test_one"
"""
input test_one_insert_input {
  age: Int
  id: uuid
  name: String
}

"""aggregate max on columns"""
type test_one_max_fields {
  age: Int
  id: uuid
  name: String
}

"""aggregate min on columns"""
type test_one_min_fields {
  age: Int
  id: uuid
  name: String
}

"""
response of any mutation on the table "test_one"
"""
type test_one_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [test_one!]!
}

"""
on_conflict condition type for table "test_one"
"""
input test_one_on_conflict {
  constraint: test_one_constraint!
  update_columns: [test_one_update_column!]! = []
  where: test_one_bool_exp
}

"""Ordering options when selecting data from "test_one"."""
input test_one_order_by {
  age: order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: test_one"""
input test_one_pk_columns_input {
  id: uuid!
}

"""
select columns of table "test_one"
"""
enum test_one_select_column {
  """column name"""
  age

  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "test_one"
"""
input test_one_set_input {
  age: Int
  id: uuid
  name: String
}

"""aggregate stddev on columns"""
type test_one_stddev_fields {
  age: Float
}

"""aggregate stddev_pop on columns"""
type test_one_stddev_pop_fields {
  age: Float
}

"""aggregate stddev_samp on columns"""
type test_one_stddev_samp_fields {
  age: Float
}

"""
Streaming cursor of the table "test_one"
"""
input test_one_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: test_one_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input test_one_stream_cursor_value_input {
  age: Int
  id: uuid
  name: String
}

"""aggregate sum on columns"""
type test_one_sum_fields {
  age: Int
}

"""
update columns of table "test_one"
"""
enum test_one_update_column {
  """column name"""
  age

  """column name"""
  id

  """column name"""
  name
}

input test_one_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: test_one_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: test_one_set_input

  """filter the rows which have to be updated"""
  where: test_one_bool_exp!
}

"""aggregate var_pop on columns"""
type test_one_var_pop_fields {
  age: Float
}

"""aggregate var_samp on columns"""
type test_one_var_samp_fields {
  age: Float
}

"""aggregate variance on columns"""
type test_one_variance_fields {
  age: Float
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

